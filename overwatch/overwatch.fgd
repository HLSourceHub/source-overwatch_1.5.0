// $LastChangedDate: 2012-02-12 18:46:12 -0500 (Sun, 12 Feb 2012) $

@include "halflife2.fgd"


@BaseClass = GMsolidstate
[
	gmsolidstate(choices) : "Solid to GM clicks" : 0 : "Will this entity count as solid when the GM clicks on it." =
	[
			0 : "Yes"
			1 : "No"
 	]
]

@BaseClass base(GMsolidstate) = GMRenderFields 
[
	usegmrender(choices) : "Use GM Render Settings" : 0 : "Should the GM render settings be used when this entity is drawn for the GM. "+
	"If set to 'No', the normal render settings are used for all players." =
	[
			0 : "No"
			1 : "Yes"
 	]
	renderfxgm(choices) : "GM Render FX" : 0 : "Several GoldSrc-era visibility modes which change the way the entity is rendered to the GM, typically by fading it in and out." =
	[
		0: "Normal"
		1: "Slow Pulse"
		2: "Fast Pulse"
		3: "Slow Wide Pulse"
		4: "Fast Wide Pulse"
		9: "Slow Strobe"
		10: "Fast Strobe"
		11: "Faster Strobe"
		12: "Slow Flicker"
		13: "Fast Flicker"
		5: "Slow Fade Away"
		6: "Fast Fade Away"
		7: "Slow Become Solid"
		8: "Fast Become Solid"
		14: "Constant Glow"
		15: "Distort"
		16: "Hologram (Distort + fade)"
		23: "Cull By Distance (TEST)"
		24: "Spotlight FX"
		26: "Fade Near"
	]
	rendermodegm(choices) : "GM Render Mode" : 0 : "Used to set a non-standard rendering mode on this entity. See also 'GM FX Amount' and 'GM FX Color'." =
	[
		0: "Normal"
		1: "Color"
		2: "Texture"
		3: "Glow"
		4: "Solid"
		5: "Additive"
		7: "Additive Fractional Frame"
		9: "World Space Glow"
		10: "Dont Render"
	]
	renderamtgm(integer) : "GM FX Amount (0 - 255)" : 255 : "The GM FX amount is used by the selected GM Render Mode."
	rendercolorgm(color255) : "GM FX Color (R G B)" : "255 255 255" : "The GM FX color is used by the selected GM Render Mode."
	
	input AlphaGM(integer) : "Sets the alpha of the brush for the GM (0 - 255)."
	input ColorGM(color255) : "Sets the FX color of the brush for the GM."
]

@PointClass base(Targetname) iconsprite("editor/logic_timer.vmt") = game_hudtimer_ow : 
	"Show a timer, LOL."
[
	StartOn(choices) : "Start On" : 1 : "Does the timer start displayed on the HUD." =
	[
		0 : "No"
		1 : "Yes"
	]

	InitialTime(integer) : "Initial time" : 120 : "The time that the timer starts with in seconds."

	RebelLabel(string) : "Rebel Text" : "" : "The text to display under the timer for the Resistance."
	GMLabel(string) : "GM Text" : "" : "The text to display under the timer for the Overwatch."

	input ShowTimer(void) : 	"Shows the timer on the HUD."
	input HideTimer(void) : 	"Hides the timer from the HUD. Also pauses the countdown."
	input StartCountdown(void) : 	"Starts/Resumes the timer counting down."
	input PauseCountdown(void) : 	"Pauses the timer from counting down."
	input AddTime(integer) : 	"Add a certain amount of time to the timer in seconds."
	input SubtractTime(integer) : 	"Subtract a certain amount of time to the timer in seconds."
	input SetTime(integer) : 	"Sets a specific time to the timer in seconds."

	output OnZero(void) : "Fired when the timer reaches zero."
	output On60SecondsLeft(void) : "Fired when there's 60 seconds left."
	output On30SecondsLeft(void) : "Fired when there's 30 seconds left."
	output On15SecondsLeft(void) : "Fired when there's 15 seconds left."
	output On10SecondsLeft(void) : "Fired when there's 10 seconds left."
	output On5SecondsLeft(void) : "Fired when there's 5 seconds left."
	output On4SecondsLeft(void) : "Fired when there's 4 seconds left."
	output On3SecondsLeft(void) : "Fired when there's 3 seconds left."
	output On2SecondsLeft(void) : "Fired when there's 2 seconds left."
	output On1SecondLeft(void) : "Fired when there's 1 second left."
]

@PointClass base(Targetname, Parentname, EnableDisable) = env_gmbutton_ow: 
	"This entity is used to display a button on the GM's GUI as a sprite. The sprite is rendered on the GUI but is dynamically positioned above this entity in the GM's view of the map. The GM can click the sprite to trigger this entity."
[
	charges(integer) : "Charges" : 1 : "How many times can this be used."
	cooldown(float) : "Cooldown" : 10 : "Time in seconds after activated until it can be used again."
	initialcooldown(float) : "Initial Cooldown" : 0 : "Sets the cooldown the button starts with. The initial cooldown can be set higher than the button's normal cooldown."
	tooltiptitle(string) : "Tooltip Title" : "" : "Text that is shown as the button's tooltip title."
	tooltip(string) : "Tooltip" : "" : "Text that is shown on the button's tooltip."
	butsize(integer) : "Button Min Size" : 25 : "Minimum size of the button to be displayed at minimum zoom level."
	butsizemax(integer) : "Button Max Size" : 50 : "Maximum size of the button to be displayed at maximum zoom level."

	matenable(sprite) : "Enabled Material" : "gm/buttons/empty_active.vmt" : "Material used when the button is enabled."
	matcooldown(sprite) : "Cooldown Material" : "gm/buttons/empty_active.vmt" : "Material used when the button is in cool down." 
	matdisable(sprite) : "Disabled Material" : "gm/buttons/empty_active.vmt" : "Material used when the button is disabled." 
	matpressed(sprite) : "Pressed Material" : "gm/buttons/empty_active.vmt" : "Material used when the button is pressed." 
	matmouseover(sprite) : "Mouse Over Material" : "gm/buttons/empty_active.vmt" : "Material used when the mouse is over the button." 

	clrenable(color255) : "Enabled Color" : "31 255 127 200" : "Color used on the material when the button is enabled."
	clrcooldown(color255) : "Cooldown Color" : "200 50 50 200" : "Color used on the material when the button is in cooldown."
	clrdisable(color255) : "Disabled Color" : "127 127 127 200" : "Color used on the material when the button is disabled."
	clrpressed(color255) : "Pressed Color" : "31 255 127 200" : "Color used on the material when the button is pressed."
	clrmouseover(color255) : "Mouse Over Color" : "31 255 127 255" : "Color used on material when the mouse is over the button."
	
	input SetTooltipTitle(string) : "Changes the tooltip title for the button."
	input SetTooltip(string) : "Changes the tooltip for the button."
	
	input SetCooldown(float) : "Sets the cooldown time for the button."
	input ForceCooldown(float) : "Forces a cooldown to start with the given duration."
	input ForceCooldownAdd(float) : "Add time to an active cooldown. Does nothing if there isn't an active cooldown."
	input ForceCooldownSubtract(float) : "Subtract time from an active cooldown. Does nothing if there isn't an active cooldown."
	
	input SetCharges(integer) : "Set number of charges left."
	input ChargesAdd(integer) : "Add more charges."
	input ChargesSubtract(integer) : "Subtract charges."
	
	output OnPressed(void) : "Fired when the GM presses this button."
	output OnCooldownFinished(void) : "Fired when the cooldown has expired."
	output OnChargesExpired(void) : "Fired when all charges have expired."
]

@PointClass base(Targetname, Parentname) size(-8 -8 -8, 8 8 8) sphere(displayrange) = env_hint_ow : 
	"This entity shows a hint icon and a text message at its position in the world. It can be defined a maximum range to show at, and who to show it to. It's rendered on the player's HUD so it can also be seen through walls if active behind one."
[

	ismaster(choices) : "Is Template" : 0 : "Is this a template hint. Template hints do not display themselves and are used in the creation of child hints to be attached to other entities, such as prop_physics_multiplayer_ow." =
	[
		0 : "No"
		1 : "Yes"
	]
	team(choices) : "Team" : 2 : "Which team the hint should be displayed to." =
	[
		0 : "Resistance"
		1 : "Overwatch"
		2 : "Both"
	]
	starton(choices) : "StartOn" : 0 : "Does this hint start on." =
	[
		0 : "No"
		1 : "Yes"
	]
	displayrange(float) : "Display Range" : 512 : "The range within which the hint is displayed to the player. Does not concern the GM."
	requireslos(choices) : "Requires LoS" : 0 : "Whether or not the hint requires LoS in order to be visible to the player." =
	[
		0 : "No"
		1 : "Yes"
	]
	showarrows(choices) : "Show Arrows" : 0 : "Whether or not the hint should show an arrow pointing at its origin." =
	[
		0 : "No"
		1 : "Yes"
	]
	showicon(choices) : "Show Icon" : 0 : "Whether or not the hint should show an icon. " =
	[
		0 : "No"
		1 : "Yes"
	]
	displayonminimap(choices) : "Display on Minimap" : 0 : "Whether or not the hint should be displayed on the minimap. " =
	[
		0 : "No"
		1 : "Yes"
	]
	tiptexture(sprite) : "Hint Texture" : "" : "The path to the hint icon material. "
	showtext(choices) : "Show Label" : 0 : "Whether or not the hint should show a text message." =
	[
		0 : "No"
		1 : "Yes"
	]
	text(string) : "Text Label" : "" : "The hint text message displayed to the player on his HUD at the right side of the icon."
	textcolor(color255) : "Label Color (R G B A)" : "255 255 255 255" : "Used by the Label key."
	
	input TurnOn(void) : "Turns the hint on and displays it to all players even if it was already on."
	input TurnOff(void) : "Turns the hint off and hides it from all players who it was showing to even if it was already off."
	input DisplayForPlayer(string) : "Display the hint for the activating player. A subsequent TurnOff input will override this."
	input HideForPlayer(string) : "Hide the hint for the activating player. A subsequent TurnOn input will override this."
]

@PointClass base(Targetname) size(-8 -8 -8, 8 8 8) = game_tasklist_ow: 
	"This entity is used to display a list of objectives on the Resistance pleyrs' HUDs and on the GM's GUI."
[
	starton(choices) : "Start On" : 1 : "Should the tasklist start visible." =
	[
			0 : "No"
			1 : "Yes"
	]
	visible(choices) : "Start Visible" : 1 : "Should it start visible." =
	[
		0 : "No"
		1 : "Yes"
	]
	team(choices) : "Team" : 3 : "Which team should see this task list." =
	[
			2 : "GM"
			3 : "Players"
			4 : "Both"
	]
	
	taskmessage(string) : "Task Text" : "" : "This is the text of the task."
	priority(choices) : "Task Priority" : 0 : "Priority" =
	[
			0 : "(1) Low Priority"
			1 : "(2) Medium Priority"
			2 : "(3) High Priority"
	]

	objcount(integer) : "Objective Max Count" : 1 : "How many times does task need to be done before its completed."
 
 	// Inputs
	input Complete(void) : 		"Complete the task. Overrides objective count."
	input Abort(void) : 		"Abort the task."
	input Activate(void) :		"Activate the task."
	input Deactivate(void) : 	"Deactivate the task."
	input Show(void) : 		"Show the task."
	input Hide(void) : 		"Hide the task."
	input AddToCount(void) : 	"Add or subtract to the objective count."
	input SetCount(void) : 		"Set the objective count."
	input SetMaxCount(void) : 	"Set the objective max count."
]

@PointClass base(Targetname, Parentname) size(-8 -8 -8, 8 8 8) = env_indicator_ow: 
	"This entity shows a hint at its position in the world. It can display an icon and a text message and arrows pointing to its origin, and it can be set to show through walls."
[
	startactive(choices) : "Start On" : 0 : "Should it start on and be visible." =
	[
		0 : "No"
		1 : "Yes"
	]
	showprogress(choices) : "Show progress" : 1 : "Should it display the progress bar. The progress starts at 100% by default. It can be changed via the SetProgress input." =
	[
		0 : "No"
		1 : "Yes"
	]
	team(choices) : "Team" : 0 : "Which team should see this indicator." =
	[
		0 : "Both"
		1 : "Players"
		2 : "GM"
	]
	displayrange(float) : "Display Range" : 0 : "The range within which the indicator is displayed to the player. Does not concern the GM. 0 = infinite range"
	
	gmtexture(sprite) : "GM Icon" : "" : "The path to the texture."
	rebeltexture(sprite) : "Rebel Icon" : "" : "The path to the texture."
	
	gmlabel(string) : "GM Text" : "" : "Label shown to the GM. Displayed under the icon."
	rebellabel(string) : "Rebel Text" : "" : "Label shown to rebels. Displayed under the icon."
	
	input TurnOn(void) : "Turn on the indicator." 
	input TurnOff(void) : "Turn off the indicator." 
	input ShowProgress(bool) : "Hides the progress bar with a parameter of 0 and shows it with a parameter of 1." 
	input SetProgressRatio(float) : "Set progress ratio to show. Between [0..1] where 1 is max (100%). Usage: a func_breakable can have an output OnHealthChanged send to this. Then the func_breakable's health will be shown by the env_indicator_ow."
]

@SolidClass base(func_areaportal) color(0 128 255) = func_areaportal_ow :
	"This entity is identical to func_areaportal but is always open for the GM." []

@SolidClass base(func_brush, GMRenderFields) = func_brush_ow: 
	"This entity is identical to func_brush except it also includes GM specific render settings."
[
]

@PointClass base(Targetname) size(-8 -8 -8, 8 8 8) = game_activity_ow : 
	"This entity is used to send outputs on different player activities."
[
	// Outputs
	output OnConnect(void) : "Fired when a player joins the game."
	output OnDisconnect(void) : "Fired when a player leaves the game."
	output OnTeamJoinPlayer(void) : "Fired when a player joins a Player team."
	output OnTeamJoinGM(void) : "Fired when a player joins the GM team."
	output OnTeamLeavePlayer(void) : "Fired when a player leaves a Player team."
	output OnTeamLeaveGM(void) : "Fired when a player leaves the GM team."
	output OnPlayerSpawn(void) : "Fired when a player in the Player team spawns."
	output OnPlayerDeath(void) : "Fired when a player in the Player team dies."
	output OnAllPlayersDead(void) : "Fired when all players in the Player team are dead."
]

@PointClass base(Targetname) iconsprite("editor/game_end.vmt") = game_end_ow : 
	"This entity is identical to game_end with some additional inputs. It's used to end the round or the map to a draw or a victory for one of the teams." 
[
	input EndGame(void) : "End the map without a score screen."
	input EndGameGMWin(void) : "End the map to GM victory."
	input EndGamePlayersWin(void) : "End the map to victory for players."
	input EndGameDraw(void) : "End the map to a draw."
	input EndRoundGMWin(void) : "End the round to GM victory."
	input EndRoundPlayersWin(void) : "End the round to victory for players."
	input EndRoundDraw(void) : "End the round to a draw."
]

@PointClass base(Targetname) size(-8 -8 -8, 8 8 8) = game_player_count_ow : 
	"This entity keeps track of the number of connected clients."
[
	input GetClientCount(void) : "Fires this entity's OnGetClientCount."
	input GetPlayerCount(void) : "Fires this entity's OnGetPlayerCount."
	input GetAlivePlayerCount(void) : "Fires this entity's OnGetAlivePlayerCount."

	// Outputs
	output OnGetClientCount(integer) : "Fired when this entity's GetClientCount input is called. Outputs the number of all clients currently in the game."
    output OnGetPlayerCount(integer) : "Fired when this entity's GetPlayerCount input is called. Outputs the number of players currently in the player team."
	output OnGetAlivePlayerCount(integer) : "Fired when this entity's GetAlivePlayerCount input is called. Outputs the number of alive players currently in the player team."
]

@PointClass base(Targetname) size(-8 -8 -8, 8 8 8) = game_settings_ow : 
	"This entity defines some game settings."
[
	allowspawning(choices) : "Allow new player spawning" : 0 : "Whether or not NEW players can spawn after the round has started. New players are players who haven't yet spawned during the current round." =
	[
			0 : "No"
			1 : "Yes"
 	]
	allowrespawning(choices) : "Allow dead player respawning" : 0 : "Whether or not DEAD players can respawn after the round has started. Dead players are players who have spawned at least once during the current round." =
	[
			0 : "No"
			1 : "Yes"
 	]
	defeat_dead(choices) : "Defeat on all players dead" : 1 : "Should the round end in GM victory when all the players are dead." =
	[
			0 : "No"
			1 : "Yes"
	]
	
	input EnableNewPlayerSpawning(void) : "Allow the new players to spawn."
	input DisableNewPlayerSpawning(void) : "Disallow the new players to spawn."
	input ToggleNewPlayerSpawning(void) : "Toggle the setting for allowing the new players to spawn."

	input EnableDeadPlayerSpawning(void) : "Allow the dead players to respawn."
	input DisableDeadPlayerSpawning(void) : "Disallow the dead players to respawn."
	input ToggleDeadPlayerSpawning(void) : "Toggle the setting for allowing the dead players to respawn."

	input EnableDefeatOnPlayersDead(void) : "Enable the round ending in GM victory if all players are dead."
	input DisableDefeatOnPlayersDead(void) : "Disable the round ending in GM victory if all players are dead."
]

@SolidClass base(Targetname, Parentname) = game_zone_player_ow: 
	"This entity is identical to game_zone_player except it only accounts for players in the Resistance team in its outputs."
[
	input CountPlayersInZone(void) : "Count the number of living Resistance players in the zone, and fire the corresponding outputs."
	
	output OnPlayerInZone(void) : "Fired whenever a count finds a player inside the zone."
	output OnPlayerOutZone(void) : "Fired whenever a count finds a player outside the zone."
	output PlayersInCount(integer) : "Fired after a count, and contains the number of players found inside the zone."
	output PlayersOutCount(integer) : "Fired after a count, and contains the number of players found outside the zone."
]

@SolidClass base(Targetname) = trigger_capturearea_ow :
	"Trigger brush representing capture zones" 
[
	CapTime(float) : "Capture Time" : 60 : "Time in seconds it takes to capture the area."
	CapDelay(float) : "Capture Delay" : 0 : "Time in seconds it takes before capturing starts when a player/unit enters the area."
	DecayTime(float) : "Decay Time" : -1 : "Time in seconds it takes for the progress to reset back to 0% from 100%. Use -1 to disable."
	DecayDelay(float) : "Decay Delay" : 0 : "Time in seconds it takes before decaying starts after capturing is paused."
	Team(choices) : "Team" : 0 : "Which teams are allowed to capture this area." =
	[
		0 : "Resistance"
		1 : "Overwatch"
		2 : "Both"
	]
	ResistanceIndicator(target_destination) : "Resistance Indicator" :: "Name of the indicator to be linked to this entity when the Resistance has progress on the area."
	OverwatchIndicator(target_destination) : "Overwatch Indicator" :: "Name of the indicator to be linked to this entity when the Overwatch has progress on the area."
	RevProgress(choices) : "Reverse Progress" : 0 : "Count the progress down from 100% instead of up from 0%." =
	[
		0 : "No"
		1 : "Yes"
	]
	StartDisabled(choices) : "Start Disabled" : 0 : "Start Disabled?" =
	[
		0 : "No"
		1 : "Yes"
	]
	
	input SetResistanceProgress(float) : "Set Resistance capture progress."
	input SetOverwatchProgress(float) : "Set Overwatch capture progress."
	input GetProgressRatio(void) : "Get progress ratio"
	
	output OnGetProgressRatio(float) : "Fired whenever a count finds a player inside the zone."
	output OnOverwatchCaptureStarted(void) : "Fired whenever a count finds a player outside the zone."
	output OnOverwatchCaptureFinished(void) : "Fired after a count, and contains the number of players found inside the zone."
	output OnOverwatchCapturePaused(void) : "Fired after a count, and contains the number of players found outside the zone."
	output OnResistanceCaptureStarted(void) : "Fired whenever a count finds a player outside the zone."
	output OnResistanceCaptureFinished(void) : "Fired after a count, and contains the number of players found inside the zone."
	output OnResistanceCapturePaused(void) : "Fired after a count, and contains the number of players found outside the zone."
	output OnDecayStarted(void) : "Fired after a count, and contains the number of players found inside the zone."
	output OnDecayFinished(void) : "Fired after a count, and contains the number of players found outside the zone."
]

@PointClass base(PlayerClass, Targetname) studio("models/editor/playerstart.mdl") = info_player_gm_ow :
	"This entity indicates the position at which the GM will spawn in the map. Only one info_player_gm_ow entity should be placed in a map."
[
	angles(angle) : "Pitch Yaw Roll (Y Z X)" : "80 90 0" : "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis. NOTE: The Z value should be set as 80, so the GM's view is looking down upon the level properly."
]

@PointClass base(PlayerClass, Targetname, Angles) studio("models/editor/playerstart.mdl") = info_player_rebel_ow :
	"This entity indicates the position and facing direction at which the player will spawn in the map. Any number of info_player_rebel_ow entities may be placed in a map."
[
	startdisabled(choices) : "Start Disabled" : 0 : "Should players not spawn here initially." =
	[
		0 : "No"
		1 : "Yes"
	]
	input DisableSpawn(void) : "Turn off this spawnpoint."
	input EnableSpawn(void) : "Turn on this spawnpoint."
	input ToggleSpawn(void) : "Toggle this spawnpoint."
]

@PointClass iconsprite("editor/logic_auto.vmt") = logic_auto_ow : 
	"This entity is identical to logic_auto with the additional output OnMultiRoundStart which is fired after the warm-up period of a new round. The description of the OnMultiNewRound output is also updated."
[
	spawnflags(Flags) =
	[
		1 : "Remove on fire" : 1
	]
	
	globalstate(choices) : "Global State to Read" : : "If set, this specifies a global state to check before firing. The OnMapSpawn output will only fire if the global state is set." =
	[
		"" : "--- None ---"
		"gordon_precriminal" : "Gordon pre-criminal" 
		"antlion_allied" : "Antlions are player allies" 
		"suit_no_sprint" : "Suit sprint function not yet enabled" 
		"super_phys_gun" : "Super phys gun is enabled" 
		"friendly_encounter" : "Friendly encounter sequence (lower weapons, etc.)"
		"gordon_invulnerable" : "Gordon is invulnerable"
		"no_seagulls_on_jeep" : "Don't spawn seagulls on the jeep"
		"is_console" : "Game is running on a console"
		"is_pc" : "Game is running on a PC"
	]
	
	// Outputs
	output OnMapSpawn(void) : "Fired when the map is loaded for any reason."
	output OnNewGame(void) : "Fired when the map is loaded to start a new game."
	output OnLoadGame(void) : "Fired when the map is loaded from a saved game."
	output OnMapTransition(void) : "Fired when the map is loaded due to a level transition."
	output OnBackgroundMap(void) : "Fired when the map is loaded as a background to the main menu."
	output OnMultiNewMap(void) : "Fired only in multiplayer, when a new map is loaded."
	output OnMultiNewRound(void) : "Fired when the warm-up period of a new round is started, and also when the map is reset without starting a round."
	output OnMultiRoundStart(void) : "Fired when the warm-up period of a new round ends."
]

@PointClass base(npc_turret_floor) studio("models/combine_turrets/floor_turret.mdl") = npc_turret_floor_ow :
	"This entity is identical to npc_turret_floor with the additional key Use (OVERWATCH) which defines whether or not the turret can be carried or turned off by the players."
[
	turret_use(choices) : "Use (OVERWATCH)" : 1 : "Can this turret be carried or toggled." =
	[
		0 : "No"
		1 : "Can be carried"
		2 : "Can be toggled"
	]
]

@PointClass base(prop_physics_multiplayer) studio() = prop_physics_multiplayer_ow :
	"This entity is identical to prop_physics_multiplayer with a few additions. It can be set to return home (the point where it was originally spawned) after a given duration. It also has the possibility of attaching a hint entity to it."
[
	HintEntity(string) : "Attached Hint" : "" : "The name of an env_hint_ow entity whose settings will be duplicated to display a hint attached to this prop."
	ReturnHomeTime(float) : "Return Home Time" : 0 : "Time until this prop resets to it's spawn point after being moved. Set to 0 to disable."
]

@PointClass base(prop_dynamic,GMRenderFields) studio() = prop_dynamic_ow :
	"A prop_dynamic but with added GM rendering settings."
[
]

@SolidClass base(Trigger) = trigger_autorevive_ow :
	"Trigger brush to automattically revive players killed within it's volume" []

@PointClass base(Weapon) studio("models/weapons/riotshield.mdl") = weapon_riotshield_ow :
	"Places a riotshield in the map." []

@PointClass base(Weapon) studio("models/weapons/w_healthkit.mdl") = weapon_medpack_ow :
	"Places a healthkit in the map." []
	
@PointClass base(Targetname, Parentname, EnableDisable) iconsprite("gm/buttons/spawns/barrack_enable.vmt") = unit_spawn_ow :
	"Unit spawn entity (Barrack)."
[

	DestinationGroup(target_destination) : "Name of Destination Group" : : "If you'd like spawned NPCs to be created at an unit_spawn_destination_ow entity, enter the name of that entity here. If you have more than one destination entity by that name, the Destination Criteria will be used to select one from the group."
	RallyPoint(target_destination) : "Default Rally Point Node" : "" : "Target node where the unit will move by default after spawning. The rally point can be changed by the GM during the game."
	
	SlotManager1(target_destination) : "Spawn Slot 1 Manager" : "" : "Specifies the targetname of the spawn slot manager for the specified slot in the menu button."
	SlotManager2(target_destination) : "Spawn Slot 2 Manager" : "" : "Specifies the targetname of the spawn slot manager for the specified slot in the menu button."
	SlotManager3(target_destination) : "Spawn Slot 3 Manager" : "" : "Specifies the targetname of the spawn slot manager for the specified slot in the menu button."
	SlotManager4(target_destination) : "Spawn Slot 4 Manager" : "" : "Specifies the targetname of the spawn slot manager for the specified slot in the menu button."
	SlotManager5(target_destination) : "Spawn Slot 5 Manager" : "" : "Specifies the targetname of the spawn slot manager for the specified slot in the menu button."
	SlotManager6(target_destination) : "Spawn Slot 6 Manager" : "" : "Specifies the targetname of the spawn slot manager for the specified slot in the menu button."SlotManager1(target_destination) : "Spawn Slot 1 Manager" : "" : "Specifies the targetname of the spawn slot manager for the specified slot in the menu button."
	SlotManager7(target_destination) : "Spawn Slot 7 Manager" : "" : "Specifies the targetname of the spawn slot manager for the specified slot in the menu button."
	SlotManager8(target_destination) : "Spawn Slot 8 Manager" : "" : "Specifies the targetname of the spawn slot manager for the specified slot in the menu button."
	SlotManager9(target_destination) : "Spawn Slot 9 Manager" : "" : "Specifies the targetname of the spawn slot manager for the specified slot in the menu button."
	SlotManager10(target_destination) : "Spawn Slot 10 Manager" : "" : "Specifies the targetname of the spawn slot manager for the specified slot in the menu button."
	SlotManager11(target_destination) : "Spawn Slot 11 Manager" : "" : "Specifies the targetname of the spawn slot manager for the specified slot in the menu button."
	SlotManager12(target_destination) : "Spawn Slot 12 Manager" : "" : "Specifies the targetname of the spawn slot manager for the specified slot in the menu button."
]

@PointClass base(Targetname, Parentname, EnableDisable) = unit_spawn_slotmanager_ow :
	"This entity is used to define the settings of a unit spawn slot of a unit_spawn_ow entity."
[
	ButtonMaterial(sprite) : "Button Material" : "" : "Material to be used on the button displaying this slot." 
	UnitDisplayName(string) : "Unit Display Name" : "" : "The name displayed for the unit in-game and in the spawn tooltip."
	UnitDescription(string) : "Unit Description" : "" : "The description displayed for the unit in-game and in the spawn tooltip."
	TemplateName(target_destination) : "Name of template NPC" : "" : "Template NPC that this maker should be creating clones of. Can be left empty if no template NPC is used."
	SupplyCost(integer) : "Supply Cost" : 1 : "Defines the supply cost for the spawned unit."
	SpawnTime(float) : "Spawn Time" : 1 : "Defines the time the unit takes to spawn."
	Stock(integer) : "Initial Stock" : 3 : "Defines how many units of this type is available when the map starts."
	StockCap(integer) : "Stock Limit" : 5 : "Defines the maximum number of this unit type that can be available at the same time."
	StockInterval(float) : "Restock Interval" : 6 : "Interval in seconds after which one unit of this type is a added to the stock. The timer is paused when the stock becomes full."

	input SetResourceCost(integer) : "Modifies the resource cost."
	input SetSupplyCost(integer) : "Modifies the supply cost."
	input SetSpawnTime(float) : "Modifies the spawn time."
	
	input	InputSetStock(integer) : "Modify the available stock"
	input	InputSetStockLimit(integer) : "Modify the stock limit"
	input	InputSetReStockInterval( float ) : "Modify the restock interval"
]

@PointClass base(Targetname, Parentname, Angles) iconsprite("editor/info_target.vmt") = unit_spawn_destination_ow : 
	"NPC Spawn Destination. (Consult unit_spawn_ow help for more info)"
[
	ReuseDelay(float) : "Reuse Delay" : 1 : "After an NPC is spawned at this destination, the delay before this destination is eligible for selection again."
	RenameNPC(string) : "New NPC Name" : "" : "If an NPC spawns at this destination, change that NPC's targetname to this."

	// Outputs
	output OnSpawnNPC(void) : "Fired when an NPC spawns at this destination."
]

@PointClass base(Targetname) iconsprite("vgui/achievements/hl2_find_allgmen.vmt") = game_gm_resources_ow : 
	"GM Resource"
[
	supplylimit13(integer) : "Supply Limit 1-3" : 8 : "Supply Limit when there's 1-3 players."
	supplylimit45(integer) : "Supply Limit 4-5" : 10 : "Supply Limit when there's 4-5 players."
	supllylimit67(integer) : "Supply Limit 6-7" : 12 : "Supply Limit when there's 6-7 players."
	initialMoney(integer) : "Initial Money" : 100 : "How much money does the GM start with."
	regularPayments(choices) : "Regular Payments" : 1 : "Does the GM get regular payments." =
	[
		0 : "No"
		1 : "Yes"
	]
	payment13(integer) : "Regular Payment 1-3" : 1 : "How much money does the GM get every five secons, if there's 1-3 players."
	payment45(integer) : "Regular Payment 4-5" : 2 : "How much money does the GM get every five secons, if there's 4-5 players."
	payment67(integer) : "Regular Payment 6-7" : 3 : "How much money does the GM get every five secons, if there's 6-7 players."

	input	SetSupplyLimit13(integer) : "Set Supply Limit 1-3."
	input	SetSupplyLimit45(integer) : "Set Supply Limit 4-5."
	input	SetSupplyLimit67(integer) : "Set Supply Limit 6-7."

	input 	AddMoney(integer) : "Give the GM money."
	input 	RemoveMoney(integer) : "Remove some of GM's money."
	input	SetMoney(integer) : "Set GM's money to a specific ammount."

	input	SetPayment13(integer) : "Set Regular Payment 1-3."
	input	SetPayment45(integer) : "Set Regular Payment 4-5."
	input	SetPayment67(integer) : "Set Regular Payment 6-7."

	input	EnablePayments(void) : "Enabled Regular Payments."
	input	DisablePayments(void) : "Disable Regular Payments."
]

@PointClass base(Targetname) size(-8 -8 -8, 8 8 8) = game_respawn_ow: 
	"This entity manages the respawning of Rebel players."
[
	wavestarton(choices) : "Waves Start On" : 0 : "Do the timed respawn waves start on." =
	[
			0 : "No"
			1 : "Yes"
	]
	wavetime(integer) : "Respawn Wave Time" : 0 : "The time between each respawn wave in seconds."
	activemessage(integer) : "Active Message" : 0 : "The currently active message that gets displayed to dead players. The default message is displayed if set to 0."
	
	message01(string) : "Message 1" : "" : "Text to display to players that are dead when the Active Message is set to 1."
	message02(string) : "Message 2" : "" : "Text to display to players that are dead when the Active Message is set to 2."
	message03(string) : "Message 3" : "" : "Text to display to players that are dead when the Active Message is set to 3."
	message04(string) : "Message 4" : "" : "Text to display to players that are dead when the Active Message is set to 4."
	message05(string) : "Message 5" : "" : "Text to display to players that are dead when the Active Message is set to 5."
	message06(string) : "Message 6" : "" : "Text to display to players that are dead when the Active Message is set to 6."
	message07(string) : "Message 7" : "" : "Text to display to players that are dead when the Active Message is set to 7."
	message08(string) : "Message 8" : "" : "Text to display to players that are dead when the Active Message is set to 8."
	
 	// Inputs
	input DisableWave(void) : 		"Disable the timed Respawn Waves."
	input EnableWave(void) : 		"Enable the timed Respawn Waves."
	input ToggleWave(void) :		"Toggle the timed Respawn Waves."
	input SetWaveTime(integer) : 	"Set the time between timed Respawn Waves in seconds."
	input SetActiveMessage(integer) : 		"Set the number message to be displayed when players are dead."
	input ForceRespawn(void) : 		"Force all currently dead players to respawn immediately regardless of the timed Respawn Waves."
	
	// Outputs
	output OnWaveNoRespawn(void) : "Fired when the timed respawn wave hits zero, but there are no dead players to spawn."
	output OnWaveRespawn(void) : "Fired when the timed respawn wave hits zero and at least one player is respawned."
	output OnForceNoRespawn(void) : "Fired when the entity receives a ForceRespawn input but there are no dead players to spawn."
	output OnForceRespawn(void) : "Fired when the entity receives a ForceRespawn input and at least one player is respawned."
	
	
]

@PointClass base(point_teleport) = point_teleport_ow :
	"Point teleport entity that also teleports the return-to location of the teleported entity if it is a weapon." []
	
@PointClass base(npc_enemyfinder) = npc_enemyfinder_ow :
	"Enemy finder used to find a random rebel within LOS"
[
	// Inputs
	input GetVisibleRebel(void) :	"Find a random rebel player within LOS."
	
	// Outputs
	output OnGetVisibleRebel(string) : "Fired when a random rebel player has been found within LOS.  Returns the entity handle"
]
